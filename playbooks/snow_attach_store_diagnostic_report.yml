---
- name: Attach Store Diagnostic Report to ServiceNow Incident
  hosts: localhost
  gather_facts: false
  roles:
    - Output

  tasks:
    - name: Create panos-cli configuration file
      ansible.builtin.copy:
        dest: /home/runner/.panos-cli.yml
        content: |
          apikey: "{{ panw_api_token }}"
          user: "{{ panw_user }}"
          password: "{{ panw_password }}"
      no_log: true

    - name: Create ios-cli configuration file
      ansible.builtin.copy:
        dest: /home/runner/.ios-cli.yml
        content: |
          apikey: "{{ panw_api_token }}"
          user: "{{ ansible_user }}"
          password: "{{ ansible_ssh_pass }}"
      no_log: true

    - name: Import tasks
      ansible.builtin.include_tasks: "{{ item }}"
      loop:
        - tasks/snow_attach_store_diagnostic_report/servicenow.yml
        - tasks/snow_attach_store_diagnostic_report/store_switch.yml
        - tasks/snow_attach_store_diagnostic_report/rocklin_mpls_router.yml
        - tasks/snow_attach_store_diagnostic_report/firewall.yml
        - tasks/snow_attach_store_diagnostic_report/vmanage.yml

  post_tasks:
    - name: Render diagnostic report
      ansible.builtin.template:
        src: templates/snow_attach_store_diagnostic_report.j2
        dest: "{{ output_dir }}/{{ snow_incident | lower }}_store_diagnostic_report_{{ timestamp }}.txt"

    - name: Attach diagnostic report to incident
      servicenow.itsm.incident:
        instance:
          host: "{{ snow_instance }}"
          username: "{{ snow_username }}"
          password: "{{ snow_password }}"
        number: "{{ snow_incident }}"
        attachments:
          - path: "{{ output_dir }}/{{ snow_incident | lower }}_store_diagnostic_report_{{ timestamp }}.txt"

    - name: Set work_notes fact
      ansible.builtin.set_fact:
        work_notes: |
          Store Switch:<br />
          {% if store_switch_ping.stdout is defined %}
          {% if store_switch_ping.stdout | regex_search("Success rate is [1-9]", multiline=True, ignorecase=False) %}
            Pingable: Yes<br />
          {% else %}
            Pingable: <span style="color: red">No</span><br />
          {% endif %}
          {% else %}
            Pingable: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if store_switch_uptime.stdout_lines[5] is defined %}
            Uptime: {{ store_switch_uptime.stdout_lines[5] | regex_replace("^.+uptime is ", "") }}<br />
          {% else %}
            Uptime: <span style="color: red">N/A</span><br />
          {% endif %}
          Store Router:<br />
          {% if store_router_ping.stdout is defined %}
          {% if store_router_ping.stdout | regex_search("Success rate is [1-9]", multiline=True, ignorecase=False) %}
            Pingable: Yes<br />
          {% else %}
            Pingable: <span style="color: red">No</span><br />
          {% endif %}
          {% else %}
            Pingable: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if store_subnet_lookup.stdout_lines[5] is defined %}
          {% if store_subnet_lookup.stdout_lines[5] | regex_search(store_subnet, multiline=False, ignorecase=False) %}
          MPLS Path: Up<br />
          {% else %}
          MPLS Path: <span style="color: red">Down</span><br />
          {% endif %}
          {% else %}
          MPLS Path: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if not sdwan_store %}
          {% if store_bb_tunnel_status.stdout is defined %}
          {% if store_bb_tunnel_status.stdout | regex_search("prefixes\s[1-9]\d*\s*$", multiline=True, ignorecase=False) %}
          Broadband Tunnel: Up<br />
          {% else %}
          Broadband Tunnel: <span style="color: red">Down</span><br />
          {% endif %}
          {% else %}
          Broadband Tunnel: <span style="color: red">N/A</span><br />
          {% endif %}
          {% endif %}
          {% if sdwan_store %}
          SD-WAN Tunnel States:<br />
          {% if asbc1_hub_1_sessions.json.data is defined %}
            Ashburn Hub 1:<br />
          {% for s in asbc1_hub_1_sessions.json.data %}
              {{ s["local-color"] | title }}: {% if s.state == "up" %}Up<br />{% else %}<span style="color: red">{{ s.state | title }}</span><br />{% endif +%}
          {% endfor %}
          {% else %}
            Ashburn Hub 1: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if rkat1_hub_1_sessions.json.data is defined %}
            Rocklin Hub 1:<br />
          {% for s in rkat1_hub_1_sessions.json.data %}
              {{ s["local-color"] | title }}: {% if s.state == "up" %}Up<br />{% else %}<span style="color: red">{{ s.state | title }}</span><br />{% endif +%}
          {% endfor %}
          {% else %}
            Rocklin Hub 1: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if rkat1_hub_2_sessions.json.data is defined %}
            Rocklin Hub 2:<br />
          {% for s in rkat1_hub_2_sessions.json.data %}
              {{ s["local-color"] | title }}: {% if s.state == "up" %}Up<br />{% else %}<span style="color: red">{{ s.state | title }}</span><br />{% endif +%}
          {% endfor %}
          {% else %}
            Rocklin Hub 2: <span style="color: red">N/A</span><br />
          {% endif %}
          {% endif %}
          {% if store_internet_egress.stdout is defined %}
          {% if store_internet_egress.stdout | regex_search("8.8.8.8.+msec", multiline=True, ignorecase=False) or store_switch_connect_ws_site.stdout | regex_search("Open", multiline=True, ignorecase=False) %}
          Internet Reachable: Yes<br />
          {% else %}
          Internet Reachable: <span style="color: red">No</span><br />
          {% endif %}
          {% else %}
          Internet Reachable: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if store_internet_egress.stdout is defined %}
          {% if store_internet_egress.stdout | regex_search("asgi1", multiline=True, ignorecase=False) %}
          Internet Egress: Ashburn<br />
          {% elif store_internet_egress.stdout | regex_search("rkat1", multiline=True, ignorecase=False)  %}
          Internet Egress: Rocklin<br />
          {% elif store_internet_egress.stdout | regex_search("sast1", multiline=True, ignorecase=False)  %}
          Internet Egress: Sacramento<br />
          {% else %}
          Internet Egress: <span style="color: red">Unknown</span><br />
          {% endif %}
          {% else %}
          Internet Egress: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if store_switch_dns_test.stdout is defined %}
          {% if store_switch_dns_test.stdout | regex_search("Translating.+domain\sserver\s\(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\)\s\[OK\]", multiline=True, ignorecase=False) %}
          DNS Resolution Functional: Yes<br />
          {% else %}
          DNS Resolution Functional: <span style="color: red">No</span><br />
          {% endif %}
          {% else %}
          DNS Resolution Functional: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if store_switch_connect_ws_site.stdout is defined %}
          {% if store_switch_connect_ws_site.stdout | regex_search("Open", multiline=True, ignorecase=False) %}
          Williams Sonoma Site (williams-sonoma.com) Reachable: Yes<br />
          {% else %}
          Williams Sonoma Site (williams-sonoma.com) Reachable: <span style="color: red">No</span><br />
          {% endif %}
          {% else %}
          Williams Sonoma Site (williams-sonoma.com) Reachable: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if store_switch_connect_storesweb.stdout is defined %}
          {% if store_switch_connect_storesweb.stdout | regex_search("Open", multiline=True, ignorecase=False) %}
          Store Wide Web Site ({{ storesweb_fqdn }}) Reachable: Yes<br />
          {% else %}
          Store Wide Web Site ({{ storesweb_fqdn }}) Reachable: <span style="color: red">No</span><br />
          {% endif %}
          {% else %}
          Store Wide Web Site ({{ storesweb_fqdn }}) Reachable: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if store_switch_connect_verifone.stdout is defined %}
          {% if store_switch_connect_verifone.stdout | regex_search("Open", multiline=True, ignorecase=False) %}
          Verifone API (api.vfipayna.com) Reachable: Yes<br />
          {% else %}
          Verifone API (api.vfipayna.com) Reachable: <span style="color: red">No</span><br />
          {% endif %}
          {% else %}
          Verifone API (api.vfipayna.com) Reachable: <span style="color: red">N/A</span><br />
          {% endif %}
          Verifone active firewall sessions:<br />
          {% if active_verifone_sessions_ashburn.stdout_lines is defined %}
            Ashburn: {{ active_verifone_sessions_ashburn.stdout_lines | length - 1 }}<br />
          {% else %}
            Ashburn: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if active_verifone_sessions_rocklin.stdout_lines is defined %}
            Rocklin: {{ active_verifone_sessions_rocklin.stdout_lines | length - 1 }}<br />
          {% else %}
            Rocklin: <span style="color: red">N/A</span><br />
          {% endif %}
          {% if active_verifone_sessions_sacramento.stdout_lines is defined %}
            Sacramento: {{ active_verifone_sessions_sacramento.stdout_lines | length - 1 }}<br />
          {% else %}
            Sacramento: <span style="color: red">N/A</span><br />
          {% endif %}

    - name: Update incident work notes
      servicenow.itsm.incident:
        instance:
          host: "{{ snow_instance }}"
          username: "{{ snow_username }}"
          password: "{{ snow_password }}"
        number: "{{ snow_incident }}"
        other:
          work_notes: |
            [code]<h3>Store Analysis</h3><pre style="background-color: transparent; border-width: 0">[/code]
            [code]{{ work_notes }}[/code]
            [code]</pre>[/code]
