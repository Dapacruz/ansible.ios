---
- name: ServiceNow | Fetch incident and store details
  block:
    - name: ServiceNow | Fetch incident
      ansible.builtin.uri:
        url: "{{ snow_instance }}/api/now/v1/table/incident?sysparm_display_value=true&sysparm_fields=u_store&sysparm_query=number={{ snow_incident | upper }}"
        user: "{{ snow_username }}"
        password: "{{ snow_password }}"
        method: GET
        force_basic_auth: true
      register: incident_details

    - name: ServiceNow | Set store_number fact
      ansible.builtin.set_fact:
        store_number: "{{ incident_details.json.result[0].u_store.display_value }}"
      when: incident_details.json.result[0].u_store

    - name: ServiceNow | Fetch store details
      ansible.builtin.uri:
        url: "{{ snow_instance }}/api/now/v1/table/u_store_information_1?sysparm_display_value=true&sysparm_fields=u_concept,u_sdwan,u_poc_wifi&sysparm_query=u_store_statusANYTHING^u_store_numberSTARTSWITH{{ store_number }}"
        user: "{{ snow_username }}"
        password: "{{ snow_password }}"
        method: GET
        force_basic_auth: true
      register: store_details_job
      async: 30
      poll: 0

    - name: ServiceNow | Fetch store network details
      ansible.builtin.uri:
        url: "{{ snow_instance }}/api/now/v1/table/u_network?sysparm_display_value=true&sysparm_fields=u_router,u_switch_1,u_ip_network,u_subnet_mask,u_bb_tunnel1&sysparm_query=u_store_statusANYTHING^u_store_numberSTARTSWITH{{ store_number }}"
        user: "{{ snow_username }}"
        password: "{{ snow_password }}"
        method: GET
        force_basic_auth: true
      register: store_network_details_job
      async: 30
      poll: 0

    - name: ServiceNow | Fetch store WAN circuits
      ansible.builtin.uri:
        url: "{{ snow_instance }}/api/now/v1/table/u_telecom?sysparm_display_value=true&sysparm_fields=u_vendor,u_vendor_1,u_vendor_2,u_vendor_3,u_vendor_4,u_vendor_5,u_vendor_6,u_service,u_service_1,u_service_2,u_service_3,u_service_4,u_service_5,u_service_6,u_circuit_id_access,u_circuit_id_access_1,u_circuit_id_access_2,u_circuit_id_access_3,u_circuit_id_access_4,u_circuit_id_access_5,u_circuit_id_access_6,u_circuit_id_pip,u_circuit_id_pip_1,u_circuit_id_pip_2,u_circuit_id_pip_3,u_circuit_id_pip_4,u_circuit_id_pip_5,u_circuit_id_pip_6,u_pip_speed,u_pip_speed_1,u_pip_speed_2,u_pip_speed_3,u_pip_speed_4,u_pip_speed_5,u_pip_speed_6,u_access_speed,u_access_speed_1,u_access_speed_2,u_access_speed_3,u_access_speed_4,u_access_speed_5,u_access_speed_6&sysparm_query=u_store_statusANYTHING%5Eu_store_numberSTARTSWITH{{ store_number }}"
        user: "{{ snow_username }}"
        password: "{{ snow_password }}"
        method: GET
        force_basic_auth: true
      register: store_wan_circuits_job
      async: 30
      poll: 0

    - name: ServiceNow | Wait for async jobs to finish
      ansible.builtin.async_status:
        jid: "{{ job.ansible_job_id }}"
      register: jobs
      until: jobs.finished
      retries: 30
      delay: 1
      loop: "{{ [store_details_job, store_network_details_job, store_wan_circuits_job] }}"
      loop_control:
        loop_var: job

    - name: ServiceNow | Set store detail facts
      ansible.builtin.set_fact:
        store_details: "{{ jobs.results[0] }}"
        store_network_details: "{{ jobs.results[1] }}"
        store_wan_circuits: "{{ jobs.results[2].json.result[0] | default('') }}"

    - name: ServiceNow | Set store facts
      ansible.builtin.set_fact:
        store_concept: "{{ store_details.json.result[0].u_concept }}"
        sdwan_store: "{{ store_details.json.result[0].u_sdwan }}"
        store_switch: "{{ store_network_details.json.result[0].u_switch_1 }}"
        store_router: "{{ store_network_details.json.result[0].u_router }}"
        store_subnet: "{{ store_network_details.json.result[0].u_ip_network }}"
        store_subnet_mask: "{{ store_network_details.json.result[0].u_subnet_mask }}"
        store_bb_tun1: "{{ store_network_details.json.result[0].u_bb_tunnel1 }}"
        mist_store: "{{ store_details.json.result[0].u_poc_wifi }}"

    - name: ServiceNow | Generate POS subnet host range
      ansible.builtin.command: /usr/bin/python3
      args:
        stdin: |
          from ipaddress import ip_network
          subnet = ip_network("{{ store_subnet }}/{{ store_subnet_mask }}")
          first_ip_split = str(subnet[1]).split(".")
          last_ip_split = str(subnet[-2]).split(".")
          iteration = 1
          subnet_host_range_regex = ""
          for ip1, ip2 in zip(first_ip_split, last_ip_split):
              if ip1 == ip2:
                  subnet_host_range_regex += f"{ip1}"
              else:
                  subnet_host_range_regex += f"[{ip1}-{ip2}]"
              if iteration < 4:
                  subnet_host_range_regex += "."
              iteration += 1
          print(subnet_host_range_regex)
      changed_when: false
      register: pos_subnet_host_range_regex

    - name: ServiceNow | Set pos_subnet_host_range_regex fact
      ansible.builtin.set_fact:
        pos_subnet_host_range_regex: "{{ pos_subnet_host_range_regex.stdout }}"

    - name: ServiceNow | Set pin_pad_subnet_host_range_regex fact
      ansible.builtin.set_fact:
        pin_pad_subnet_host_range_regex: "{{ pos_subnet_host_range_regex | regex_replace('^(\\d{3})\\.26\\.', '\\1.28.') }}"
  tags: servicenow
