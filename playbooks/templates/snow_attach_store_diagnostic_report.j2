#jinja2: lstrip_blocks: True, trim_blocks: True
##### Store Details ##############################

Incident: {{ snow_incident | upper }}
Store: {{ store_number }}
Concept: {{ store_concept }}
POS Subnet: {{ store_subnet }} {{ store_subnet_mask }}
PIN Pad Subnet: {{ store_subnet | regex_replace('^(\\d{3})\\.26\\.', '\\1.28.') }} {{ store_subnet_mask }}
Switch: {{ store_switch }}
Router: {{ store_router }}
Cisco SD-WAN: {% if sdwan_store %}Yes{% else %}No{% endif +%}
Mist Wireless: {% if mist_store %}Yes{% else %}No{% endif +%}


##### Store Analysis ##############################

Store Switch:
{% if not store_switch_ping.stderr | default("failed") %}
{% if store_switch_ping.stdout | regex_search("Success rate is [1-9]", multiline=True, ignorecase=False) %}
  Pingable: Yes
{% else %}
  Pingable: No ðŸ”´
{% endif %}
{% else %}
  Pingable: N/A ðŸ”´
{% endif %}
{% if not store_switch_uptime.stderr | default("failed") %}
  Uptime: {{ store_switch_uptime.stdout_lines[5] | regex_replace("^.+uptime is ", "") }}
{% else %}
  Uptime: N/A ðŸ”´
{% endif %}
Store Router:
{% if not store_router_ping.stderr | default("failed") %}
{% if store_router_ping.stdout | regex_search("Success rate is [1-9]", multiline=True, ignorecase=False) %}
  Pingable: Yes
{% else %}
  Pingable: No ðŸ”´
{% endif %}
{% else %}
  Pingable: N/A ðŸ”´
{% endif %}
{% if not store_subnet_lookup.stderr | default("failed") %}
{% if store_subnet_lookup.stdout_lines[5] | regex_search(store_subnet, multiline=False, ignorecase=False) %}
MPLS Path: Up
{% else %}
MPLS Path: Down ðŸ”´
{% endif %}
{% else %}
MPLS Path: N/A ðŸ”´
{% endif %}
{% if not sdwan_store %}
{% if not store_bb_tunnel_status.stderr | default("failed") %}
{% if store_bb_tunnel_status.stdout | regex_search("prefixes\s[1-9]\d*\s*$", multiline=True, ignorecase=False) %}
Broadband Tunnel: Up
{% else %}
Broadband Tunnel: Down ðŸ”´
{% endif %}
{% else %}
Broadband Tunnel: N/A ðŸ”´
{% endif %}
{% endif %}
{% if sdwan_store %}
Cisco SD-WAN:
  Tunnel Status:
{% if asbc1_hub_1_sessions.json.data | default("") %}
    Ashburn Hub Router:
{% for s in asbc1_hub_1_sessions.json.data %}
      {{ s["local-color"] | title }}: {% if s.state == "up" %}Up{% else %}{{ s.state | title }} ðŸ”´{% endif +%}
{% endfor %}
{% else %}
    Ashburn Hub Router: N/A ðŸ”´
{% endif %}
{% if rkat1_hub_1_sessions.json.data | default("") %}
    Rocklin Hub Router 1:
{% for s in rkat1_hub_1_sessions.json.data %}
      {{ s["local-color"] | title }}: {% if s.state == "up" %}Up{% else %}{{ s.state | title }} ðŸ”´{% endif +%}
{% endfor %}
{% else %}
    Rocklin Hub Router 1: N/A ðŸ”´
{% endif %}
{% if rkat1_hub_2_sessions.json.data | default("") %}
    Rocklin Hub Router 2:
{% for s in rkat1_hub_2_sessions.json.data %}
      {{ s["local-color"] | title }}: {% if s.state == "up" %}Up{% else %}{{ s.state | title }} ðŸ”´{% endif +%}
{% endfor %}
{% else %}
    Rocklin Hub Router 2: N/A ðŸ”´
{% endif %}
{% if tloc_stats.json.data | default("") %}
  TLOC Stats (Past Hour):
{% set remote_colors =  [ "biz-internet", "private1", "private2" ] %}
{% set properties =  [ "Jitter", "Latency", "Loss_Percentage", "vQoE_Score" ] %}
{% for c in remote_colors %}
    {{ c | title }}:
{% for p in properties %}
{% set stats =  tloc_stats.json.data | selectattr("remote_color", "equalto", c) | map(attribute=p | lower) | list %}
{% set stats_mean = "%.2f" | format(stats | sum / stats | length) %}
{% if p == "vQoE_Score" and stats_mean | int <= 5 %}
    {{ p | replace("_", " ") }}: {{ stats_mean }} ðŸ”´
{% else %}
    {{ p | replace("_", " ") }}: {{ stats_mean }}
{% endif %}
{% endfor %}
{% endfor %}
{% else %}
    TLOC Stats (Past Hour): N/A ðŸ”´
{% endif %}
{% endif %}
{% if mist_store %}
Mist Wireless:
{% if mist_site_stats.json | default("") %}
  Site: {{ mist_site_stats.json.name }}
{% if mist_site_stats.json.num_ap_connected == mist_site_stats.json.num_ap %}
  Connected APs: {{ mist_site_stats.json.num_ap_connected }}/{{ mist_site_stats.json.num_ap }}
{% else %}
  Connected APs: {{ mist_site_stats.json.num_ap_connected }}/{{ mist_site_stats.json.num_ap }} ðŸ”´
{% endif %}
  Connected Clients: {{ mist_site_stats.json.num_clients }}
{% else %}
  Site: N/A ðŸ”´
  Connected APs: N/A ðŸ”´
  Connected Clients: N/A ðŸ”´
{% endif %}
{% if mist_wlans.json | default("") %}
  SSIDs:
{% for wlan in mist_wlans.json %}
    {{ wlan.ssid }}:
      Enabled: {% if wlan.enabled %}Yes{% else %}No{% endif +%}
      Connected Clients: {{ mist_client_stats.json | selectattr('ssid', 'match', wlan.ssid) | length }}
{% endfor %}
{% else %}
  SSIDs: N/A ðŸ”´
{% endif %}
{% if mist_client_stats.json | default("") %}
{% set rssi =  mist_client_stats.json | map(attribute='rssi') | sort %}
  RSSI:
    Best: {% if rssi[-1] | int > -70 %}{{ rssi[-1] }}{% else %}{{ rssi[-1] }} ðŸ”´{% endif +%}
    Worst: {% if rssi[0] | int > -70 %}{{ rssi[0] }}{% else %}{{ rssi[0] }} ðŸ”´{% endif +%}
    Median: {% if rssi[rssi | length // 2] | int > -70 %}{{ rssi[rssi | length // 2] }}{% else %}{{ rssi[rssi | length // 2] }} ðŸ”´{% endif +%}
    Top 5 Worst:
{% for c in (mist_client_stats.json | sort(attribute="rssi"))[:5] %}
{% if c.hostname | default("") and c.hostname | default("") != "\"\"" %}
      {{ c.ip }} ({{ c.hostname }}):
{% else %}
      {{ c.ip }}:
{% endif %}
        RSSI: {% if c.rssi | int > -70 %}{{ c.rssi }}{% else %}{{ c.rssi }} ðŸ”´{% endif +%}
        SNR: {% if c.snr | int > 25 %}{{ c.snr }}{% else %}{{ c.snr }} ðŸ”´{% endif +%}
        SSID: {{ c.ssid }}
        Channel: {{ c.channel }}
        MAC Address: {{ c.mac }}
        Username: {{ c.username | default("") }}
{% endfor %}
{% else %}
  RSSI: N/A ðŸ”´
{% endif %}
{% endif %}
{% if not store_internet_egress.stderr | default("failed") %}
{% if store_internet_egress.stdout | regex_search("8.8.8.8.+msec", multiline=True, ignorecase=False) or store_switch_connect_ws_site.stdout | regex_search("Open", multiline=True, ignorecase=False) %}
Internet Reachable: Yes
{% else %}
Internet Reachable: No ðŸ”´
{% endif %}
{% else %}
Internet Reachable: N/A ðŸ”´
{% endif %}
{% if not store_internet_egress.stderr | default("failed") %}
{% if store_internet_egress.stdout | regex_search("asgi1", multiline=True, ignorecase=False) %}
Internet Egress: Ashburn
{% elif store_internet_egress.stdout | regex_search("rkat1", multiline=True, ignorecase=False)  %}
Internet Egress: Rocklin
{% elif store_internet_egress.stdout | regex_search("sast1", multiline=True, ignorecase=False)  %}
Internet Egress: Sacramento
{% else %}
Internet Egress: Unknown ðŸ”´
{% endif %}
{% else %}
Internet Egress: N/A ðŸ”´
{% endif %}
{% if not store_switch_dns_test.stderr | default("failed") %}
{% if store_switch_dns_test.stdout | regex_search("Translating.+domain\sserver\s\(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\)\s\[OK\]", multiline=True, ignorecase=False) %}
DNS Resolution Functional: Yes
{% else %}
DNS Resolution Functional: No ðŸ”´
{% endif %}
{% else %}
DNS Resolution Functional: N/A ðŸ”´
{% endif %}
{% if not store_switch_connect_ws_site.stderr | default("failed") %}
{% if store_switch_connect_ws_site.stdout | regex_search("Open", multiline=True, ignorecase=False) %}
Williams Sonoma Site (williams-sonoma.com) Reachable: Yes
{% else %}
Williams Sonoma Site (williams-sonoma.com) Reachable: No ðŸ”´
{% endif %}
{% else %}
Williams Sonoma Site (williams-sonoma.com) Reachable: N/A ðŸ”´
{% endif %}
{% if not store_switch_connect_storesweb.stderr | default("failed") %}
{% if store_switch_connect_storesweb.stdout | regex_search("Open", multiline=True, ignorecase=False) %}
Store Wide Web Site ({{ storesweb_fqdn }} ) Reachable: Yes
{% else %}
Store Wide Web Site ({{ storesweb_fqdn }} ) Reachable: No ðŸ”´
{% endif %}
{% else %}
Store Wide Web Site ({{ storesweb_fqdn }} ) Reachable: N/A ðŸ”´
{% endif %}
{% if not store_switch_connect_verifone.stderr | default("failed") %}
{% if store_switch_connect_verifone.stdout | regex_search("Open", multiline=True, ignorecase=False) %}
Verifone API (api.vfipayna.com) Reachable: Yes
{% else %}
Verifone API (api.vfipayna.com) Reachable: No ðŸ”´
{% endif %}
{% else %}
Verifone API (api.vfipayna.com) Reachable: N/A ðŸ”´
{% endif %}
Verifone active firewall sessions:
{% if not active_verifone_sessions_ashburn.stderr | default("failed") %}
  Ashburn: {{ active_verifone_sessions_ashburn.stdout_lines | length - 1 }}
{% else %}
  Ashburn: N/A ðŸ”´
{% endif %}
{% if not active_verifone_sessions_rocklin.stderr | default("failed") %}
  Rocklin: {{ active_verifone_sessions_rocklin.stdout_lines | length - 1 }}
{% else %}
  Rocklin: N/A ðŸ”´
{% endif %}
{% if not active_verifone_sessions_sacramento.stderr | default("failed") %}
  Sacramento: {{ active_verifone_sessions_sacramento.stdout_lines | length - 1 }}
{% else %}
  Sacramento: N/A ðŸ”´
{% endif %}


##### Rocklin MPLS Router: Store Switch Reachability ##############################

{% if not store_switch_ping.stderr | default("failed") %}
{% for item in store_switch_ping.stdout_lines[4:-4] %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


##### Store Switch: Uptime ##############################

{% if not store_switch_uptime.stderr | default("failed") %}
{% for item in store_switch_uptime.stdout_lines[4:-4] %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


##### Rocklin MPLS Router: Store Router Reachability ##############################

{% if not store_router_ping.stderr | default("failed") %}
{% for item in store_router_ping.stdout_lines[4:-4] %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


##### Rocklin MPLS Router: Store POS Subnet in Route Table ##############################

{% if not store_subnet_lookup.stderr | default("failed") %}
{% for item in store_subnet_lookup.stdout_lines[4:-4] %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


{% if sdwan_store %}
##### vManage: Rocklin Hub Router 1 BFD Sessions

{% if rkat1_hub_1_sessions.json.data | default("") %}
{{ rkat1_hub_1_sessions.json.data | ansible.builtin.to_nice_json }}
{% else %}
N/A
{% endif %}


##### vManage: Rocklin Hub Router 2 BFD Sessions

{% if rkat1_hub_2_sessions.json.data | default("") %}
{{ rkat1_hub_2_sessions.json.data | ansible.builtin.to_nice_json }}
{% else %}
N/A
{% endif %}


##### vManage: Ashburn Hub Router BFD Sessions

{% if asbc1_hub_1_sessions.json.data | default("") %}
{{ asbc1_hub_1_sessions.json.data | ansible.builtin.to_nice_json }}
{% else %}
N/A
{% endif %}


##### vManage: TLOC Statistics

{% if tloc_stats.json.data | default("") %}
{{ tloc_stats.json.data | ansible.builtin.to_nice_json }}
{% else %}
N/A
{% endif %}


{% endif %}
{% if not sdwan_store %}
##### Rocklin MPLS Router: Store Broadband VPN Tunnel Status ##############################

{% if not store_bb_tunnel_status.stderr | default("failed") %}
{% for item in store_bb_tunnel_status.stdout_lines[4:-4] %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


{% endif %}
{% if mist_store %}
##### Mist: Sites

{% if mist_sites.json | default("") %}
{{ mist_sites.json | ansible.builtin.to_nice_json }}
{% else %}
N/A
{% endif %}


##### Mist: Site Stats

{% if mist_site_stats.json | default("") %}
{{ mist_site_stats.json | ansible.builtin.to_nice_json }}
{% else %}
N/A
{% endif %}


##### Mist: Client Stats

{% if mist_client_stats.json | default("") %}
{{ mist_client_stats.json | ansible.builtin.to_nice_json }}
{% else %}
N/A
{% endif %}


##### Mist: WLANs

{% if mist_wlans.json | default("") %}
{{ mist_wlans.json | ansible.builtin.to_nice_json }}
{% else %}
N/A
{% endif %}


{% endif %}
##### Store Switch: Internet Path ##############################

{% if not store_internet_egress.stderr | default("failed") %}
{% for item in store_internet_egress.stdout_lines[4:-4] %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


##### Store Switch: DNS Resolution ##############################

{% if not store_switch_dns_test.stderr | default("failed") %}
{% for item in store_switch_dns_test.stdout_lines[4:-4] %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


##### Store Switch: Connect to www.williams-sonoma.com ##############################

{% if not store_switch_connect_ws_site.stderr | default("failed") %}
{% for item in store_switch_connect_ws_site.stdout_lines[4:-4] %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


##### Store Switch: Connect to Store Wide Web ##############################

{% if not store_switch_connect_storesweb.stderr | default("failed") %}
{% for item in store_switch_connect_storesweb.stdout_lines[4:-4] %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


##### Store Switch: Connect to Verifone ##############################

{% if not store_switch_connect_verifone.stderr | default("failed") %}
{% for item in store_switch_connect_verifone.stdout_lines[4:-4] %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


##### Ashburn Verifone Connections ##############################

{% if not active_verifone_sessions_ashburn.stderr | default("failed") %}
{% for item in active_verifone_sessions_ashburn.stdout_lines %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


##### Rocklin Verifone Connections ##############################

{% if not active_verifone_sessions_rocklin.stderr | default("failed") %}
{% for item in active_verifone_sessions_rocklin.stdout_lines %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}


##### Sacramento Verifone Connections ##############################

{% if not active_verifone_sessions_sacramento.stderr | default("failed") %}
{% for item in active_verifone_sessions_sacramento.stdout_lines %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}

{% if not sdwan_store %}

##### Rocklin MPLS Router: Store Broadband VPN Tunnels Down ##############################

{% if not store_vpn_down_count.stderr | default("failed") %}
{% for item in store_vpn_down_count.stdout_lines[4:-4] %}
{# Strip ASCII control characters #}
{% set item = item | regex_replace("[^\x20-\x7e]", "") %}
{% if "***" in item %}
{{ item | regex_replace("\s?\*{3}\s?", "") }}

{% elif item.startswith("Number") %}
{{ item }}
{% else %}
{{ item }}
{% endif %}
{% endfor %}
{% else %}
N/A
{% endif %}
{% endif %}