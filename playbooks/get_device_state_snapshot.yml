---
- name: Get Device State Snapshot
  hosts: "{{ hosts_limit | lower }}"
  connection: local
  gather_facts: false
  roles:
    - output

  tasks:
    - name: Include IOS Tasks
      include_tasks: tasks/get_device_state_snapshot/ios.yml
      when: ansible_network_os == "ios"

    - name: Include NX-OS Tasks
      include_tasks: tasks/get_device_state_snapshot/nxos.yml
      when: ansible_network_os == "nxos"

  post_tasks:
    - name: Render Main Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/main.j2
        dest: "{{ output_dir }}/{{ inventory_hostname_short }}_device_state_snapshot_{{ timestamp }}.txt"
      delegate_to: localhost

    - name: Render Running Configuration Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/running_config.j2
        dest: "{{ output_dir }}/running_config.txt"
      delegate_to: localhost
      when: save_config | bool

    - name: Render Running Configuration CSV Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/running_config_csv.j2
        dest: "{{ output_dir }}/running_config.csv"
      delegate_to: localhost
      when: save_config | bool

    - name: Render Version Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/version.j2
        dest: "{{ output_dir }}/version.csv"
      delegate_to: localhost

    - name: Render Route Table Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/route_table.j2
        dest: "{{ output_dir }}/route_table.csv"
      delegate_to: localhost

    - name: Render BGP Neighbors Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/bgp_neighbors.j2
        dest: "{{ output_dir }}/bgp_neighbors.csv"
      delegate_to: localhost

    - name: Merge CSV Files into an Excel Workbook
      command: /usr/bin/python3
      args:
        stdin: |
          from pathlib import Path
          import pandas as pd

          p = Path("{{ output_dir }}")
          with pd.ExcelWriter("{{ output_dir }}/{{ inventory_hostname_short }}_device_state_snapshot_{{ timestamp }}.xlsx", engine="xlsxwriter") as writer:
              wb = writer.book
              cell_format = wb.add_format()
              cell_format.set_font_name("Consolas")
              for f in sorted(p.glob("*.csv")):
                  df = pd.read_csv(f)
                  sheet_name = str(f).replace("{{ output_dir }}/", "").replace(".csv", "")
                  df.to_excel(writer, sheet_name=sheet_name, index=False)
                  worksheet = writer.sheets[sheet_name]
                  # Get the dimensions of the dataframe
                  (max_row, max_col) = df.shape
                  # Get column headers
                  column_settings = [{"header": column} for column in df.columns]
                  # Add Excel table
                  worksheet.add_table(0, 0, max_row, max_col - 1, {"columns": column_settings, "style": "Table Style Medium 2"})
                  # Resize columns for better readability
                  for idx, col in enumerate(df):
                      series = df[col]
                      max_len = max((series.astype(str).map(len).max(),len(str(series.name)))) + 3
                      worksheet.set_column(idx, idx, max_len, cell_format)

    - name: Find Files to Attach
      ansible.builtin.find:
        paths: "{{ output_dir }}"
        patterns:
          - "*.xlsx"
          - "*.txt"
      register: files

    - name: Mail Report
      community.general.mail:
        host: "{{ smtp_server }}"
        port: "{{ smtp_port }}"
        subject: "{{ inventory_hostname_short | upper }} Device State Snapshot"
        body: Attached please find the device state snapshot files for {{ inventory_hostname_short | upper }}.
        from: "{{ smtp_from }}"
        to:
          - "{{ smtp_to }}"
        attach: "{{ files.files | json_query('[].path') }}"
      ignore_errors: true
      delegate_to: localhost
