---
- name: Get Device State Snapshot
  hosts: all
  connection: local
  gather_facts: false

  pre_tasks:
    - name: Get Current Date/Time
      ansible.builtin.command:
        cmd: env TZ="America/Los_Angeles" date +"%Y%m%dT%H%m%S"
      changed_when: false
      register: date_output

    - name: Set Date Fact
      ansible.builtin.set_fact:
        date: "{{ date_output.stdout }}"

    - name: Set Output Directory Fact
      ansible.builtin.set_fact:
        output_directory: "{{ playbook_dir }}/output/{{ inventory_hostname_short }}"

    - name: Set Facts
      ansible.builtin.set_fact:
        device_state_snapshot_running_config: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_running_config_{{ date }}.csv"
        device_state_snapshot_version: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_version_{{ date }}.csv"
        device_state_snapshot_interfaces: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_interfaces_{{ date }}.csv"
        device_state_snapshot_arp_cache: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_arp_cache_{{ date }}.csv"
        device_state_snapshot_route_table: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_route_table_{{ date }}.csv"
        device_state_snapshot_ospf_neighbors: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_ospf_neighbors_{{ date }}.csv"
        device_state_snapshot_bgp_neighbors: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_bgp_neighbors_{{ date }}.csv"
        device_state_snapshot_xlsx: "{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_{{ date }}.xlsx"

    - name: Create Output Directory
      ansible.builtin.file:
        state: directory
        path: "{{ output_directory }}"
      delegate_to: localhost

  tasks:
    - name: Include IOS Tasks
      include_tasks: tasks/get_device_state_snapshot_ios.yml
      when: ansible_network_os == "ios"

    - name: Include NX-OS Tasks
      include_tasks: tasks/get_device_state_snapshot_nxos.yml
      when: ansible_network_os == "nxos"

  post_tasks:
    - name: Render Running Configuration CSV Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/running_config_csv.j2
        dest: "{{ device_state_snapshot_running_config }}"
      delegate_to: localhost

    - name: Render Version Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/version.j2
        dest: "{{ device_state_snapshot_version }}"
      delegate_to: localhost

    - name: Render Route Table Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/route_table.j2
        dest: "{{ device_state_snapshot_route_table }}"
      delegate_to: localhost

    - name: Render BGP Neighbors Template
      ansible.builtin.template:
        src: templates/device_state_snapshot/bgp_neighbors.j2
        dest: "{{ device_state_snapshot_bgp_neighbors }}"
      delegate_to: localhost

    - name: Merge CSV Files into an Excel Workbook
      command: /usr/bin/python3
      args:
        stdin: |
          from pathlib import Path
          import pandas as pd

          p = Path("{{ output_directory }}")
          with pd.ExcelWriter("{{ device_state_snapshot_xlsx }}", engine="xlsxwriter") as writer:
              wb = writer.book
              cell_format = wb.add_format()
              cell_format.set_font_name("Consolas")
              for f in sorted(p.glob("*.csv")):
                  df = pd.read_csv(f)
                  sheet_name = str(f).replace("{{ output_directory }}/{{ inventory_hostname_short }}_device_state_snapshot_", "").replace("_{{ date }}.csv", "")
                  df.to_excel(writer, sheet_name=sheet_name, index=False)
                  worksheet = writer.sheets[sheet_name]
                  # Get the dimensions of the dataframe
                  (max_row, max_col) = df.shape
                  # Get column headers
                  column_settings = [{"header": column} for column in df.columns]
                  # Add Excel table
                  worksheet.add_table(0, 0, max_row, max_col - 1, {"columns": column_settings, "style": "Table Style Medium 2"})
                  # Resize columns for better readability
                  for idx, col in enumerate(df):
                      series = df[col]
                      max_len = max((series.astype(str).map(len).max(),len(str(series.name)))) + 3
                      worksheet.set_column(idx, idx, max_len, cell_format)

    - name: Attach Device State Snapshot to Incident
      servicenow.itsm.incident:
        instance:
          host: "{{ snow_instance }}"
          username: "{{ snow_username }}"
          password: "{{ snow_password }}"
        number: "{{ snow_incident }}"
        attachments:
          - path: "{{ device_state_snapshot_xlsx }}"
            type: officedocument.spreadsheetml.sheet
